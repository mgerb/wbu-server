group(

    -key pair
    grKeys => int                       //store for group id's
    
    -key pair
    grID:<groupName> => int             //takes in group name and returns group id
    
    -hash
    grHash:<groupID> => {               //group object that contains various information.. tbd
        groupname: string
        owner: userID
        maxmembers: int
        password: hashed(string)
    }
    
    -set
    grMem:<groupID> => [...userID]      //array of userID's
    
    deprecate??xxxxxxxxxxxxxxxxxxxxxx
    -set
    grInv:<groupID> => [...userID]      //array of userID's
    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    
    -list of messages 
    grMsg:<groupID> => [<userID>:<time>:<message>]
    
    -geoset of group locations
    grGeo:<groupID, long, lat, userID/userName/timestamp> => 
    
)

user(
    
    uKeys => int                      //store for user id's
    
    uID:<username> => int             //takes in username and returns userID
    
    uHash:<userID> => {               //user object
        username: string
        password: hashed(password)
        location: geohash/timestamp
        apnsToken: string             //apple push notification service token
        gcmToken: string              //google cloud messaging token
    }
    
    -set of user groups
    uGrps:<userID> => [...groupID/groupName]  //returns array of groupID's / groupNames
    
    -set
    uInv:<userID> => [...groupID] //contains set of group id's that user has pending invites to
)